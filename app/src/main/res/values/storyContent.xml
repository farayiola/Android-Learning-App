<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="storyContents">
        <item>Android uses a version of the Linux kernel with a few special additions such as Low Memory Killer (a memory management system that is more aggressive in preserving memory), wake locks (a PowerManager system service), the Binder IPC driver, and other features important for a mobile embedded platform.\n Android architecture contains different number of components to support any android device needs. Android software contains an open-source Linux Kernel having collection of number of C/C++ libraries which are exposed through an application framework services./n
Among all the components Linux Kernel provides main functionality of operating system functions to smartphones and Dalvik Virtual Machine (DVM) provide platform for running an android application.\n
      Applications\n
        Applications is the top layer of android architecture. The pre-installed applications like home, contacts, camera, gallery etc and third party applications downloaded from the play store like chat applications, games etc. will be installed on this layer only.
It runs within the Android run time with the help of the classes and services provided by the application framework.\n
        Application runtime\n
        Android Runtime environment is one of the most important part of Android. It contains components like core libraries and the Dalvik virtual machine(DVM). Mainly, it provides the base for the application framework and powers our application with the help of the core libraries.
Like Java Virtual Machine (JVM), Dalvik Virtual Machine (DVM) is a register-based virtual machine and specially designed and optimized for android to ensure that a device can run multiple instances efficiently. It depends on the layer Linux kernel for threading and low-level memory management. The core libraries enable us to implement android applications using the standard JAVA or Kotlin programming languages.\n</item>
        <item>Android Layout is used to define the user interface that holds the UI controls or widgets that will appear on the screen of an android application or activity screen. Generally, every application is a combination of View and ViewGroup. As we know, an android application contains a large number of activities and we can say each activity is one page of the application. So, each activity contains multiple user interface components and those components are the instances of the View and ViewGroup. All the elements in a layout are built using a hierarchy of View and ViewGroup objects.\n
        View\n
        A View is defined as the user interface which is used to create interactive UI components such as TextView, ImageView, EditText, RadioButton, etc., and is responsible for event handling and drawing. They are Generally Called Widgets.\n
        Types of Android Layout\n
        Android Linear Layout: LinearLayout is a ViewGroup subclass, used to provide child View elements one by one either in a particular direction either horizontally or vertically based on the orientation property.\n
        Android Relative Layout: RelativeLayout is a ViewGroup subclass, used to specify the position of child View elements relative to each other like (A to the right of B) or relative to the parent (fix to the top of the parent).\n
        Android Constraint Layout: ConstraintLayout is a ViewGroup subclass, used to specify the position of layout constraints for every child View relative to other views present. A ConstraintLayout is similar to a RelativeLayout, but having more power.\n
        Android Frame Layout: FrameLayout is a ViewGroup subclass, used to specify the position of View elements it contains on the top of each other to display only a single View inside the FrameLayout.\n
        Android Table Layout: TableLayout is a ViewGroup subclass, used to display the child View elements in rows and columns.\n
        Android Web View: WebView is a browser that is used to display the web pages in our activity layout.\n
        Android ListView: ListView is a ViewGroup, used to display scrollable lists of items in a single column.\n
        Android Grid View: GridView is a ViewGroup that is used to display a scrollable list of items in a grid view of rows and columns.Android Grid View: GridView is a ViewGroup that is used to display a scrollable list of items in a grid view of rows and columns.\n</item>
    <item>Android Studio is the official integrated development environment (IDE) for Android application development. It is based on the IntelliJ IDEA, a Java integrated development environment for software, and incorporates its code editing and developer tools./n
    To support application development within the Android operating system, Android Studio uses a Gradle-based build system, emulator, code templates, and Github integration. Every project in Android Studio has one or more modalities with source code and resource files. These modalities include Android app modules, Library modules, and Google App Engine modules\n
    Android Studio uses an Instant Push feature to push code and resource changes to a running application. A code editor assists the developer with writing code and offering code completion, refraction, and analysis. Applications built in Android Studio are then compiled into the APK format for submission to the Google Play Store.\n
    The software was first announced at Google I/O in May 2013, and the first stable build was released in December 2014. Android Studio is available for Mac, Windows, and Linux desktop platforms. It replaced Eclipse Android Development Tools (ADT) as the primary IDE for Android application development. Android Studio and the Software Development Kit can be downloaded directly from Google.\n</item>
    <item>kotlin is a programming language that was released in 2011 by JetBrains, a company that sell integrated development \n
    \n
        Advantages of Kotlin for Android App Development:\n
        \n
       its easy to understand:\n
        Kotlin leaves no room for making errors for a simpler and lightweight codebase. More stable output codes are also issued. In a compilation time frame, the compiler can detect any potential errors without any hassles. As a result, Kotlin becomes a safer Java alternative.\n
	 \n
        less chances of bugs:\n
        Kotlin leaves no room for making errors for a simpler and lightweight codebase. More stable output codes are also issued. In a compilation time frame, the compiler can detect any potential errors without any hassles. As a result, Kotlin becomes a safer Java alternative\n
        \n
        More reliable:\n
        In comparison to many other traditional languages of programming, Kotlin is much more advanced. In 2011, Kotlin was born. Before launching its final version, Kotlin endured numerous beta and alfa levels from the moment it was released.\n
    \n
        Ease in maintenance:\n
    Kotlin supports many IDEs, including Android Studio and many other SDK software. This aims to increase a developer’s overall output, as it can accommodate the toolkits they still use frequently.\n
    \n
        Co-ordinate with existing java code:\n
    Interoperable in Java is the programming language of Kotlin. It is Java and several other frameworks and software related to the project. This makes the transition to Kotlin possible, and the two programming languages can be used conveniently at the same time.\n
    \n
        Increase productivity:\n
    Kotlin is a programming language based on Java. The cumbersome and obsolescence of Java should be removed. Kotlin has an intuitive and succinct syntax besides being a simple, portable, and powerful language. Kotlin is thus able to optimize a whole team of developers’ total productivity.\n
    \n
        Disadvantages of Kotlin for Android App Development\n
        Kotlin Minimal Learning Opportunities:\n
While most developers are migrating to Kotlin, a small number of developers are available worldwide. It gives minimal tools for programming language learning and various queries during the software development process.\n
\n
Compilation speed is slower:\n
In certain instances, Kotlin works faster than Java, especially in the course of incremental constructions. But note that when it comes to neat building, Java will always generate growth.\n
\n
Distinct from Java:\n
Even if Kotlin and Java have some similarities, they still have several major differences. After learning about Kotlin extensively, mobile app developers cannot move to any other programming language.\n
\n
Less Kotlin professionals to Recruit:\n
Despite Kotlin’s extremely relevancy, only a few programmers are today available in this field.  It is pointless to say, every mobile application developer wishing to work on Kotlin requires profound information.  Unfortunately, experts in the Kotlin sector are also tough to locate.\n
\n
Conclusion:\n
        This programming language of the modern era must nevertheless be thoroughly investigated. We must simply wait a few more years before witnessing Kotlin ascending to a prominent crest.\n
   </item>
        <item>Java is an object-oriented programming language that produces software for multiple platforms. When a programmer writes a Java application, the compiled code (known as bytecode) runs on most operating systems (OS), including Windows, Linux and Mac OS.\n
        Where Java Is Used\n
            \n
        Android Applications:\n Most Android applications use Java API or are written in Java, so much so that Java is often regarded as the official programming language for mobile app development.\n
        \n
            Desktop GUI Applications:\n Many desktop applications are developed in Java. Swing, Abstract Windowing Toolkit (AWT) and JavaFX are the main tools used for easy GUI development.
\n
    Web-Based Applications:\n Java is often employed to develop a broad range of interactive websites and web-based apps found in the insurance, social security, education and health sectors.\n
        Financial and Retail Services:\n Java is used to write transaction management and billing applications, as well as server-side applications.\n
    \n
    Science and Research:\n Java is the scientific community’s favored language for a broad range of mathematical calculations and other scientific operations. It can deal with huge datasets and big data technologies since it’s used for MATLAB and the Hadoop MapReduce framework.\n
        </item>
    <item>One major difference between Java and Kotlin is that the latter has no provision for checked exceptions.
Code Conciseness. Comparing a Java class with an equivalent Kotlin class demonstrates the conciseness of Kotlin code. …
Coroutines. CPU-intensive work and network I/O are long-running operations. The calling thread is blocked until the whole operation completes.
Data Classes. Full-size projects have several classes that are solely meant to hold data. …
Extension Functions. Kotlin allows developers to extend a class with new functionality via extension functions. These functions, although available in other programming languages like C#, arent available in Java.
Higher-Order Functions and Lambdas. A higher-order function is one that takes functions as parameters or returns a function. Also, Kotlin functions are first-class.
Implicit Widening Conversions. There is no support for implicit widening conversions for numbers in Kotlin. So, smaller types arent able to get converted to bigger types.
Inline Functions. Variables that are accessed in the body of the function are known as closures. Making use of higher-order functions can impose several runtime penalties.
Native Support for Delegation. In programming terminology, Delegation represents the process where a receiving object delegates operations to a second delegate object.
Non-private Fields. Encapsulation is essential in any program for achieving a desirable level of maintainability. …
Null Safety. One of the most infuriating issues concerning Java for developers is the NullPointerExceptions. Java lets developers assign a null value to any variable.
Primitive Types. There are 8 primitive data types, including char, double, float, and int. Unlike Kotlin, variables of a primitive type arent objects in Java.
Smart Casts. Before an object can be cast in Java, it is mandatory to check type. This is also true in scenarios where its obvious to cast the object.
Static Members. Kotlin has no provision for static members. However, in Java programming language the keyword static reflects that the particular member with which the keyword is used belongs to …
Support for Constructors. A Kotlin class, unlike a Java class, can have one or more secondary constructors in addition to a primary constructor.
Ternary Operator. Unlike Kotlin, Java has a ternary operator. The Java ternary operator simply works like a basic if statement.
Wildcard Types. In generic code, ? represents an unknown type. It is known as the wildcard</item>
        <item>An Activity is a user interface component that is mainly used to construct a single screen of the application and represents the main focus of attention on a screen. An activity can host one or more fragments at a time. Fragments, as tablets emerged with larger screens, are reusable components that are attached to and displayed within activities. It is basically a piece of an activity that enables more modular activity design. We can call a fragment is a kind of sub-activity. It is always hosted by an activity. It has its own layout and its own behavior with its own life cycle callbacks. We can add or remove fragments in an activity while the activity is running. It is possible to develop a UI only using Activities, but this is generally a bad idea since their code cannot later be reused within other Activities, and cannot support multiple screens. Activity is the UI of an application through which user can interact and Fragment is the part of the Activity, it is a sub-Activity inside activity which has its own Life Cycle which runs parallel to the Activities Life Cycle.\n
        Differences\n
        \n
        Activity is an application component that gives a user interface where the user can interact. while The fragment is only part of an activity, it basically contributes its UI to that activity.\n
        Activity is not dependent on fragment while Fragment is dependent on activity. It can’t exist independently.\n
        We can’t create multi-screen UI without using fragment in an activity, while After using multiple fragments in a single activity, we can create a multi-screen UI.\n
        Activity is not lite weight. while 	The fragment is the lite weight.\n</item>
        <item>In Android Studio, Gradle is used for building our android application projects, hence playing the role of a build system. Before Android Studio, in Eclipse we used to compile and build the applications using command line tool which was soon taken over by GUI based steps to build and run Android Applications in eclipse using ANT. Every android application development tool has to compile resources, java source code, external libraries and combine them into a final APK.
Gradle is a build system, which is responsible for code compilation, testing, deployment and conversion of the code into .dex files and hence running the app on the device. As Android Studio comes with Gradle system pre-installed, there is no need to install additional runtime softwares to build our project. Whenever you click on Run button in android studio, a gradle task automatically triggers and starts building the project and after gradle completes its task, app starts running in AVD or in the connected device. A build system like Gradle is not a compiler, linker etc, but it controls and supervises the operation of compilation, linking of files, running test cases, and eventually bundling the code into an apk file for your Android Application. There are two build.gradle files for every android studio project of which, one is for application and other is for project level(module level) build files. The build process works as shown in the below diagram Conversion of Android Code to APK with Gradle In the build process, the compiler takes the source code, resources, external libraries JAR files and AndroidManifest.xml(which contains the meta-data about the application) and convert them into .dex(Dalvik Executable files) files, which includes bytecode. That bytecode is supported by all android devices to run your app. Then APK Manager combines the .dex files and all other resources into single apk file. APK Packager signs debug or release apk using respective debug or release keystore. Debug apk is generally used for testing purpose or we can say that it is used at development stage only. When your app is complete with desired features and you are ready to publish your application for external use then you require a Release apk signed using a release keystore. Now lets shed some light on the gradle files. setting.gradle The setting.gradle(Gradle setting) file is used to specify all the modules used in your app. build.gradle (project level) The Top level (module) build.gradle file is project level build file, which defines build configurations at project level. This file applies configurations to all the modules in android application project. build.gradle (application level) The Application level build.gradle file is located in each module of the android project. This file includes your package name as applicationID, version name(apk version), version code, minimum and target sdk for a specific application module. When you are including external libraries(not the jar files) then you need to mention it in the app level gradle file to include them in your project as dependencies of the application.
Note: If a certain application is developed in variations for individual modules like, Smart Phone, Tablet or TV then separate gradle files must to be created for all. You can even start your gradle system through command line tool. Following commands are used for it: ./gradlew build - (build project) ./gradlew clean build - (build project complete scratch) ./gradlew clean build - (run the test) ./gradlew wrapper - (to see all the available tasks) Android Build Process ART - Android Runtime The Dalvik Virtual Machine is dead. Yes, Google stopped using it in 2014, although you will find most of the Android tutorials online, still not updated, but please be informed that Dalvik Virtual Machine is not used in Android anymore. The new runtime is known as ART or Android Runtime which is very well compatible with its predecessor Dalvik, but do comes in with a lot of new features like: Ahead-of-Time compilation Improved Garbage collection Improved Debugging and diagnostics.</item>
<item>In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems.

Debugging tactics can involve interactive debugging, control flow analysis, unit testing, integration testing, log file analysis, monitoring at the application or system level, memory dumps, and profiling. Many programming languages and software development tools also offer programs to aid in debugging, known as debuggers.</item>
    </string-array>
</resources>